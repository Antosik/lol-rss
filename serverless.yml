service: riot-rss-v3

app: riot-rss
org: antosik

plugins:
  - serverless-python-requirements

custom:
  S3_BUCKET: ${opt:s3_bucket, "antosik-lol-rss"}
  TTL: 10
  MAX_POOL: 5

  calculated:
    S3_BUCKET_ARN: arn:aws:s3:::${self:custom.S3_BUCKET}
    S3_RESOURCES: ${self:custom.calculated.S3_BUCKET_ARN}/v3/*
    TTL_SCHEDULE: rate(${self:custom.TTL} minutes)

  pythonRequirements:
    dockerizePip: non-linux
    layer: true

provider:
  name: aws
  runtime: python3.8
  region: ${opt:region, 'eu-central-1'}
  stage: ${opt:stage, 'dev'}
  timeout: 300

  environment:
    TTL: ${self:custom.TTL}
    S3_REGION: ${self:provider.region}
    BUCKET_NAME: ${self:custom.S3_BUCKET}
    MAX_POOL: ${self:custom.MAX_POOL}

  tracing:
    lambda: true

  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
      Resource: ${self:custom.calculated.S3_RESOURCES}

package:
  exclude:
    - __pycache__/**
    - .github/**
    - .mypy_cache/**
    - .tox/**
    - .vscode/**
    - node_modules/**
    - venv/**
    - .flake8
    - .gitignore
    - "*.xml"
    - mypy.ini
    - package-lock.json
    - package.json
    - README-ru.md
    - README.md
    - requirements.txt

functions:
  lolruesports:
    handler: handlers/lol/ruesports.handle
    events:
      - schedule: ${self:custom.calculated.TTL_SCHEDULE}
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
  lolstatus:
    handler: handlers/lol/status.handle
    events:
      - schedule: ${self:custom.calculated.TTL_SCHEDULE}
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
  lolnews:
    handler: handlers/lol/news.handle
    events:
      - schedule: ${self:custom.calculated.TTL_SCHEDULE}
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
  valorantnews:
    handler: handlers/valorant/news.handle
    events:
      - schedule: ${self:custom.calculated.TTL_SCHEDULE}
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
  valorantstatus:
    handler: handlers/valorant/status.handle
    events:
      - schedule: ${self:custom.calculated.TTL_SCHEDULE}
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
  lorstatus:
    handler: handlers/lor/status.handle
    events:
      - schedule: ${self:custom.calculated.TTL_SCHEDULE}
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
  wildriftnews:
    handler: handlers/wildrift/news.handle
    events:
      - schedule: ${self:custom.calculated.TTL_SCHEDULE}
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
  wildriftstatus:
    handler: handlers/wildrift/status.handle
    events:
      - schedule: ${self:custom.calculated.TTL_SCHEDULE}
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
